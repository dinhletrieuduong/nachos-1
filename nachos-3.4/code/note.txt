Trong thư mục "test" có file start.c không cần thiết, do đó không cần chỉnh sữa (đã xóa file)

Thêm file test.sh -> Biên dịch và run các test cơ bản



Khai bao bien phai khai bao dau` func, k la bi loi (chi cac file nam thu muc /test) ke ca cac dong for, while, ...

Khai bao 1 SC_Func thi vao code/test/start.c và code/test/start.s (tui no giong nhau het chi khac moi ten SC_Func va Func)


buf = machine->User2System(bufAddr, LIMIT);
	dong nay la doc fileName tu dia chi cua cac ki tu trong fileName
SC_OpenFileID
	Dau tien kiem tra id cua file dang mo > 10 thi dung`, < 10 thi tiep tuc
	Sau do file (k phai stdin/stdout mode) duoc mo thanh cong gia tri != Null thi index tang 1, va tra ve gia tri index - 1 la vi tri hien tai cua file
	K thanh cong thi tra ve -1
SC_ReadFile
	Vao filesys/filesys.cc .h them 2 thuoc tinh OpenId **openf + index -> them ham destruction, OpenFile* Open(char *name, int type), OpenFile* Open(char *name, int type) (overload cac ham nay`)
	Vao filesys/openfile.cc .h them OpenFile(int f, int t), OpenFile(int sector, int type), khai bao them int type la kieu mo file, int GetCurrentPos() de lay vi tri hien tai
	FileSystem la 1 OpenFile mang 2 chieu: 10 luong^` file, moi luong co 1 idFile tuong ung voi type: 0<read&write>,1<only read>,2<stdin>,3<stdout>
SC_WriteFile
	
SC_SeekFile
	

Đề yêu cầu cùng 1 lúc quản lý được 10 file. Tức là đâu đó trong hệ thống phải có 1 cái mảng kiểu OpenFile chứa 10 phần tử. Dĩ nhiên nó không nằm trong exception method, vì nằm ở đó mảng này sẽ bị xóa và khởi tạo lại mỗi lần gọi. Chính xác hơn, ta sẽ đặt nó ở lớp FileSystem ở dạng public (cho dễ cài đặt, để private phải cài thêm cái getter/setter khá khó chịu). Mỗi giá trị của OpenFileID chính là chỉ mục (index) của biến đó trong mảng ta tạo ở trên. Ví dụ mảng đó là openf thì khi mở file openf[3] giá trị trả về của hàm OpenFile sẽ là 3. Và dĩ nhiên, stdin và stdoout chính là openf[0] và openf[1]
2 bé stdin và stdoout được tạo và mở ngay trong constructor của FileSystem, nhờ đó nó luôn luôn tồn tại và không mất đi. Và khi viết systemcall ta chỉ cần kiểm tra index == 0 || index == 1 (chính là cái OpenFileID) là xong
Các thao tác đọc, viết, đóng đã có sẵn rồi, ta chỉ cần thêm phương thức Seek vào OpenFile class. Phương thức này được cài đặt bằng lệnh LSeek. Nếu chú ý các phương thức đọc và viết đã được cài sẵn thì có thể dễ dàng cài đặt phương thức này.Về vấn đề console, khi người dùng yêu cầu các file stdin và stdout thì ta xử lý riêng rẽ ( 1 lệnh if thôi). Để kiểm tra xem user có gọi 2 file đó không thì chỉ cần check OpenFileID
